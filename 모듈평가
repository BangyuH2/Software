1. 자료결합도
Server 모듈이 DB에 요청한 추천음악의 데이터를 DB가 제공한다.
즉, 참조에 의한 것이 아니므로 모듈 간 독립성이 보장된다.
즉, 해당 소프트웨어는 자료결합도의 형태로 구성되어있어 모듈화가 우수하다.

2. 스탬프결합도
Server 모듈이 DB에 음악을 요청해도 요청한 음악에 대해서만
데이터가 전달되며 레코드 전체가 넘어오는 시퀀스는 존재하지 않는다.

3. 제어결합도
상위 모듈이라고 볼 수 있는 Server가 DB에 접근이 불가능하며
DB가 음악을 받아오는 시퀀스를 이해하지 않고 있기 때문에 제어 결합이 아니다.

4. 공통결합도
전역 변수가 존재하지 않기때문에 아니다.

5. 내용결합도
App이라는 인터페이스 모듈을 통해 상호작용하기 때문에 아니다.

# 결론 : Spotify는 자료결합도의 구성을 가지며 모듈화가 뛰어나다.

1. 기능적 응집(함수적 응집)
각 모듈 User, Server, DB, App의 형태를 살펴보면 각 기능을 구성하는 형태가 함수형이다.
즉, 모듈의 함수들이 해당되는 독립적인 기능만을 수행한다.
class User:
    def open_app(self):
        print("앱을 열고 홈 페이지를 요청합니다.")
        spotify_app.request_homepage_data()
        
    def search_song(self, query):
        print(f"'{query}'를 검색합니다.")
        spotify_app.search_song(query)
    
    def play_song(self, song_id):
        print(f"'{song_id}' 곡을 재생합니다.")
        spotify_app.play_song(song_id)

모든 함수들은 각 목적에 맞게 구성되며 별도의 참조나 변경없이
단순하게 데이터만을 주고 받는 시퀀스로 구성된다.

# 결론 : Spotify는 기능적 응집 특성을 가지며 응집도가 매우 뛰어나다
## 최종 결론 : Spotify는 자료결합을 통해 데이터만을 주고받아 모듈화가 우수하며, 기능적 응집 특성을 가지고 있어 응집도도 매우 뛰어나다
